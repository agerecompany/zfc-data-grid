<?php
use ZfcDatagrid\Column\Action\Button;
use ZfcDatagrid\Filter;

/* @var $paginator \Zend\Paginator\Paginator */
$paginator = $this->paginator;

$parameterNames = $this->optionsRenderer['parameterNames'];

$url = $this->url(null, array(), ['force_canonical' => true], true);
if($this->overwriteUrl != ''){
    $url = $this->overwriteUrl;
}
$parametersHtml = array();
foreach($this->parameters as $name => $value){
    $parametersHtml []= $name.': \''.$value.'\'';
}

$tableClasses = array();
$rowClickLink = '';

if($this->rowClickAction){
    $tableClasses[] = 'clickable';

    $rowClickLink = $this->rowClickAction->getLink();
    if(count($this->rowClickAction->getLinkColumnPlaceholders()) > 0){
        throw new \Exception('Currently the row click action cannot bet used with Column parameters, except the rowId...');
    }
}

//\Zend\Debug\Debug::dump($this->getChild('toolbar')); die(__METHOD__);

/*
 * Column - background-color
 */
$styleString = '';
foreach($this->columns as $col){
    /* @var $col \ZfcDatagrid\Column\AbstractColumn */
    foreach ($col->getStyles() as $style) {

        switch (get_class($style)) {

            case 'ZfcDatagrid\Column\Style\BackgroundColor':
                $css = '$(\'#\' + row.idConcated).find(\'td[aria-describedby=' . $this->gridId . '_' . $col->getUniqueId() . ']\').css(\'background-color\', \'#'.$style->getRgbHexString().'\');';
                if ($style->hasByValues() === true) {
                    foreach ($style->getByValues() as $rule) {
                        $colString = $rule['column']->getUniqueId();
                        $operator = '';
                        switch ($rule['operator']) {

                            case Filter::EQUAL:
                                $operator = '==';
                                break;

                            case Filter::NOT_EQUAL:
                                $operator = '!=';
                                break;

                            default:
                                throw new \Exception('currently not implemented filter type: "' . $rule['operator'] . '"');
                                break;
                        }

                        $styleString .= 'if(row.'.$colString.' ' . $operator . ' \''. $rule['value'] . '\'){';
                        $styleString .= $css;
                        $styleString .= '}';
                    }
                } else{
                    $styleString .= $css;
                }
                break;
        }
    }
}

/*
 * Row coloring
 */
foreach($this->rowStyles as $style){
    /* @var $style \ZfcDatagrid\Column\Style\AbstractStyle */

    $css = '';
    $cssClass = '';

    switch (get_class($style)) {

        case 'ZfcDatagrid\Column\Style\Bold':
            $css = '\'font-weight\', \'bold\'';
            break;

        case 'ZfcDatagrid\Column\Style\Italic':
            $css = '\'font-style\', \'italic\'';
            break;

        case 'ZfcDatagrid\Column\Style\Strikethrough':
            $css = '\'text-decoration\', \'line-through\'';
            break;

        case 'ZfcDatagrid\Column\Style\Color':
            $css = '\'color\', \'#' . $style->getRgbHexString().'\'';
            break;

        case 'ZfcDatagrid\Column\Style\BackgroundColor':
            $css = '\'background-color\', \'#' . $style->getRgbHexString().'\'';
            break;

        case 'ZfcDatagrid\Column\Style\Align':
            $css = '\'text-align\'' . $style->getAlignment();
            break;

        case 'ZfcDatagrid\Column\Style\CSSClass':
            $cssClass = $style->getClass();
            break;

        default:
            throw new \Exception('Not defined yet: "' . get_class($style) . '"');
            break;
    }

    if($css != ''){
        $css = '$(\'#\' + row.idConcated).find(\'td\').css('.$css.');';
    }

    if($cssClass != ''){
        $cssClass = '$(\'#\' + row.idConcated).find(\'td\').addClass(\'' . $cssClass . '\');';
    }

    if ($style->hasByValues() === true) {
        foreach ($style->getByValues() as $rule) {
            $colString = $rule['column']->getUniqueId();
            $operator = '';
            switch ($rule['operator']) {

                case Filter::EQUAL:
                    $operator = '==';
                    break;

                case Filter::NOT_EQUAL:
                    $operator = '!=';
                    break;

                default:
                    throw new \Exception('currently not implemented filter type: "' . $rule['operator'] . '"');
                    break;
            }

            $styleString .= 'if(row.'.$colString.' ' . $operator . ' \''. $rule['value'] . '\'){';
            if($css != ''){
                $styleString .= $css;
            }
            if($cssClass != ''){
                $styleString .= $cssClass;
            }
            $styleString .= '}';
        }
    }  else{
        if($css != ''){
            $styleString .= $css;
        }
        if($cssClass != ''){
            $styleString .= $cssClass;
        }
    }
}

$itemCountPerPage = $paginator->getItemCountPerPage();
if($paginator->getItemCountPerPage() === $paginator->getTotalItemCount()){
    //@see http://stackoverflow.com/questions/1237096/how-to-show-all-rows-in-the-jqgrid
    $itemCountPerPage = -1;
}
?>

<?php echo $this->partial($this->templateToolbar);?>

<?php /*<table id="<?php echo $this->gridId; ?>" class="<?php echo implode(' ', $tableClasses); ?>"></table>
<?php echo $this->partial('zfc-datagrid/renderer/jqGrid/footer'); ?>*/ ?>


<table id="<?php echo $this->gridId; ?>_grid"></table>
<div id="<?php echo $this->gridId; ?>_pager"></div>

<script type="text/javascript">
	<?php /** @var \Zend\Diactoros\ServerRequest */ ?>
<?php $request = $this->current('request') ?>
<?php if (!$request->hasHeader('X-Requested-With')) : ?>
    <?php $this->inlineScript()->captureStart(); ?>
<?php endif; ?>


    //$.jgrid.defaults.width = 780;
    //$.jgrid.defaults.responsive = true;
    //$.jgrid.defaults.styleUI = 'Bootstrap';

$(document).ready(function () {
    //Row background-color + column background-color
    function grid_<?php echo $this->gridId; ?>_loadComplete(data){
        if(data.data && data.data.rows){
            $.each(data.data.rows, function(key, row){
                <?php echo $styleString; ?>
            });
        }
    }

    var grid_<?php echo $this->gridId; ?> = $('#<?php echo $this->gridId; ?>_grid').jqGrid({
        idPrefix: '<?php echo $this->gridId; ?>_',
        url: '<?php echo $url; ?>',

        <?php if (isset($this->editUrl)) : ?>
	        <?php $params = $this->editUrl['params']; ?>
	        editurl: '<?echo $this->url($this->editUrl['route'], $params, ['force_canonical' => true]) ?>',
        <?php endif; ?>

        caption: '<?php echo $this->title ?>',

        styleUI : 'Bootstrap4', // http://www.trirand.com/blog/?p=1484
        //iconSet : 'fontAwesome',

        //width: 'auto',
        //height: '600px',
        //height: 'auto',
        responsive : true,

        height: '<?= $this->height ?? 'auto' ?>',
        scrollerbar: true,
        /*height: function() {
         var wHeight = $(window).height();
         var hHeight = $('.header').height();
         //var hlHeight = $('.header-layout').height();
         //var tHeight = $('.context-layout .ui-tabs .ui-tabs-nav').height();
         var nqHeight = wHeight - (hHeight * 6) - (hHeight / 2);
         return nqHeight;
         }(),*/
        autowidth : true,
        forceFit : true,
        shrinkToFit : true,
        //shrinkToFit : false,

        gridview : true,
        hoverrows : true,
        viewrecords : true,

        <?php if (count($this->massActions) > 0) : ?>
        multiselect: true,
        <?php endif; ?>

        grouping: false,

        rownumbers: true,
        rowNum: <?php echo $itemCountPerPage; ?>,
        //rownumWidth: 25, // the width of the row numbers columns

        loadonce: false,

        mtype : '<?= $parameterNames['method']; ?>',

        <?php if ($parametersHtml) : ?>
        postData: { <?php echo implode(',', $parametersHtml); ?>},
        <?php endif; ?>


        sortname: '<?php echo $this->activeParameters[$parameterNames['sortColumns']]; ?>',
        sortorder: '<?php echo $this->activeParameters[$parameterNames['sortDirections']]; ?>',

        footerrow: <?= isset($this->gridFooterRow['total']) ? (int) $this->gridFooterRow : 0 ?>,
        userDataOnFooter: <?= isset($this->userDataOnFooter) ? (int) $this->userDataOnFooter : 0 ?>,

      gridComplete: function () {
         $(this).trigger('jqGrid.gridComplete');

          <?php if (isset($this->gridFooterRow['total'])) : ?>
	        var gridTotal = $('#<?php echo $this->gridId; ?>_grid');
	        var colSum = gridTotal.jqGrid('getCol', '<?php echo $this->gridFooterRow['total']?>', false, 'sum');
	        gridTotal.jqGrid('footerData', 'set',
	          {
	              <?php if (isset($this->gridFooterRow['labelField'])) : ?>
	            '<?php echo $this->gridFooterRow['labelField']?>': 'Total: ',
	              <?php endif; ?>
	            '<?php echo $this->gridFooterRow['total']?>': Number.parseFloat(colSum).toFixed(2)
	          });
          <?php endif; ?>
      },

        prmNames : {
            page: '<?php echo $parameterNames['currentPage']; ?>',
            rows: '<?php echo $parameterNames['itemsPerPage']; ?>',
            sort: '<?php echo $parameterNames['sortColumns']; ?>',
            order: '<?php echo $parameterNames['sortDirections']; ?>',
            search: '<?php echo $parameterNames['isSearch']; ?>',
        },

        pager : '#<?php echo $this->gridId; ?>_pager',
        //reloadAfterSubmit: true,
        colModel: <?php echo $this->jqgridColumns($this->columns); ?>,

        datatype : 'local',
        <?php if ($this->data['total']) : ?>
        data: {data: <?php echo $data = json_encode($this->data); ?>},
        <?php endif; ?>

        jsonReader : {
            repeatitems : false,
            id : 'idConcated',

            //The current page
            page : function(data) {
                if (data.data) {
                    return data.data.page;
                }
            },

            records : function(data) {
                if (data.data) {
                    return data.data.records;
                }
            },

            total : function(data) {
                if (data.data) {
                    return data.data.total;
                }
            },

            //Data (rows)
            root : function(data) {
                if (data.data) {
                    return data.data.rows;
                }
            }
        },

        onSelectRow: function(rowId, status, e) {
            $(this).trigger('jqGrid.onSelectRow', [rowId, status, e]);

            <?php if($rowClickLink != ''): ?>
                var colModel = grid_<?php echo $this->gridId; ?>.jqGrid('getGridParam','colModel');
                var name = colModel[$.jgrid.getCellIndex(e.target)];
                var colIndex = name.index;

                var specialColumns = $.parseJSON('<?php echo json_encode($this->columnsRowClickDisabled); ?>');
                if ($.inArray( colIndex, specialColumns) !== -1 || colIndex === undefined) {
                    return false;
                }

                var rowClickLink = '<?php echo $rowClickLink; ?>';
                rowClickLink = rowClickLink.replace('<?php echo Button::ROW_ID_PLACEHOLDER; ?>', rowId);
                window.location.href = rowClickLink;
            <?php endif; ?>
        },

        //onSelectRow: editRow,

        loadComplete: function (data) {
            //custom pagination
            //var paginator = <?php echo $this->gridId; ?>_customPaginator('<?php echo $this->gridId; ?>');
            //$('#<?php echo $this->gridId; ?>_pager_center').html(paginator);

            <?php if($styleString != ''): ?>
            if(data !== undefined){
                //on inti we load the first page, but locale type do not know about json data
                grid_<?php echo $this->gridId; ?>_loadComplete(data);
            }
            <?php endif; ?>
            $(this).trigger('jqGrid.loadComplete', [data]);
        },

        beforeSelectRow: function (rowId, e) {
            $(this).trigger('jqGrid.beforeSelectRow');
            return true;
        },

        beforeRequest: function () {
            $(this).trigger('jqGrid.beforeRequest');
            //modifySearchingFilter.call(this, ',');
        },

        rowattr: function (rowObject) {
            $(this).data('rowattr', {});
            var result = $(this).trigger('jqGrid.rowattr', [rowObject]).data('rowattr');

            var attrs = {};
            if (result != undefined) {
                $.each(result, function(i, val) {
                    if ($.isArray(val)) {
                        attrs[i] = val.join(' ');
                    } else {
                        attrs[i] = val;
                    }
                });
            }

            return attrs;
        },

        serializeRowData: function(postdata) {
            $(this).trigger('jqGrid.serializeRowData', [postdata]);

            return postdata;
        }
    });

    var navGridParameters = {
        edit: <?= isset($this->navGridEdit) ? (int) $this->navGridEdit : 0 ?>,
        add: <?= isset($this->navGridAdd) ? (int) $this->navGridAdd : 0 ?>,
        del: <?= isset($this->navGridDel) ? (int) $this->navGridDel : 0 ?>,
        refresh: <?= isset($this->navGridRefresh) ? (int) $this->navGridRefresh : 0 ?>,
        view: <?= isset($this->navGridView) ? (int) $this->navGridView : 0 ?>,
        search: <?= isset($this->navGridSearch) ? (int) $this->navGridSearch : 0 ?>,
    };
    grid_<?php echo $this->gridId; ?>.jqGrid('navGrid', '#<?= $this->gridId ?>_pager', navGridParameters,
        {},
        {},
        {
            afterShowForm: function(form) {
                // dialog window positioning
                form.closest('div.ui-jqdialog').position({
                    at: 'left+7% bottom-20%',
                    of: grid_<?php echo $this->gridId; ?>.closest('div.ui-jqgrid')
                });
            }
        }
    );
    $.data(document.body, 'jqGrid.<?php echo $this->gridId; ?>.navGrid.parameters', navGridParameters);

    var inlineNavParameters = {
        // the buttons to appear on the toolbar of the grid
        edit: <?= isset($this->inlineNavEdit) ? (int) $this->inlineNavEdit : 0 ?>,
        add: <?= isset($this->inlineNavAdd) ? (int) $this->inlineNavAdd : 0 ?>,
        //del: true, // del option not support in inlineNav @link http://stackoverflow.com/a/15850463/1335142
        cancel: <?= isset($this->inlineNavCancel) ? (int) $this->inlineNavCancel : 0 ?>,
        editParams: {
            keys: true,
            // @see This code is available in grid.js
            /*aftersavefunc: function() {
             console.log("aftersave fired for edit");
             //var grid = $("#table");
             //reloadgrid(grid);
             }, //aftersavefunc
             successfunc: function (val) {
             console.log("successfunc fired for edit");
             console.log(val);
             if (val.statusText == 'OK') {
             //$(this).jqGrid('setGridParam', {datatype: 'json'}).trigger('reloadGrid');
             }
             }*/
        },
        addParams: {
            keys: true,
        }
    };
    grid_<?php echo $this->gridId; ?>.inlineNav('#<?= $this->gridId ?>_pager', inlineNavParameters);
    $.data(document.body, 'jqGrid.<?php echo $this->gridId; ?>.inlineNav.parameters', inlineNavParameters);

    //grid_<?php echo $this->gridId; ?>.jqGrid("navGrid", "#<?= $this->gridId ?>_pager", {});


    <?php if ($this->isUserFilterEnabled === true) : ?>
    //grid_<?php echo $this->gridId; ?>.jqGrid('filterToolbar');
    grid_<?php echo $this->gridId; ?>.jqGrid("filterToolbar", {
        stringResult: true,
        searchOnEnter: true,
        //defaultSearch: myDefaultSearch,

        // multi selectbox
        /*beforeClear: function () {
            $(this.grid.hDiv).find(".ui-search-toolbar .ui-search-input>select[multiple] option").each(function () {
                this.selected = false; // unselect all options
            });

            $(this.grid.hDiv).find(".ui-search-toolbar button.ui-multiselect").each(function () {
                $(this).prev("select[multiple]").multiselect("refresh");
            }).css({
                width: "98%",
                marginTop: "1px",
                marginBottom: "1px",
                paddingTop: "3px"
            });
        }*/
    });
    <?php endif; ?>


    <?php if ($this->isUserFilterEnabled === true) : ?>
    //grid_<?php //echo $this->gridId; ?>//.navGrid("<?php //echo $this->gridId; ?>//_pager",
    //    // the buttons to appear on the toolbar of the grid
    //    { edit: true, add: true, del: true, search: false, refresh: false, view: false, position: "left", cloneToTop: false },
    //    // options for the Edit Dialog
    //    {
    //        editCaption: "The Edit Dialog",
    //        recreateForm: true,
    //        checkOnUpdate : true,
    //        checkOnSubmit : true,
    //        closeAfterEdit: true,
    //        errorTextFormat: function (data) {
    //            return 'Error: ' + data.responseText
    //        }
    //    },
    //    // options for the Add Dialog
    //    {
    //        closeAfterAdd: true,
    //        recreateForm: true,
    //        errorTextFormat: function (data) {
    //            return 'Error: ' + data.responseText
    //        }
    //    },
    //    // options for the Delete Dailog
    //    {
    //        errorTextFormat: function (data) {
    //            return 'Error: ' + data.responseText
    //        }
    //    });

    <?php endif; ?>

    <?php if ($this->data['total']) : ?>
        /*
         * The first page is loaded directly without ajax, that's why it's here complicated...
         * @todo find something "smarter"
         */
        grid_<?php echo $this->gridId; ?>.jqGrid('setGridParam', {
            datatype : 'json'
        }).trigger('reload');
        grid_<?php echo $this->gridId; ?>.jqGrid()[0].addJSONData(grid_<?php echo $this->gridId; ?>.jqGrid('getGridParam', 'data'));
        grid_<?php echo $this->gridId; ?>.trigger('reload');
        grid_<?php echo $this->gridId; ?>_loadComplete(grid_<?php echo $this->gridId; ?>.jqGrid('getGridParam', 'data'));
    <?php endif; ?>
});

<?php if (!$request->hasHeader('X-Requested-With')) : ?>
    <?php $this->inlineScript()->captureEnd(); ?>
<?php endif; ?>
</script>

<?php /*echo $this->partial('zfc-datagrid/renderer/jqGrid/buttons', [
    'navButtons' => $this->navButtons,
    'gridId' => $this->gridId,
])*/ ?>
